group thriftPojo;

parameterDeclaration(param) ::= <<
<if(param.isPojo || param.isEnumPojo)>
private <param.pojoType> <param.nameLowerCase>;
<elseif(param.isGenericMap)>
private java.util.Map\<<param.pojoKey.pojoType>, <param.pojoValue.pojoType>\> <param.nameLowerCase>;
<elseif(param.isGenericList)>
private java.util.List\<<param.listType.pojoType>\> <param.nameLowerCase>;
<elseif(param.isGenericSet)>
private java.util.Set\<<param.listType.pojoType>\> <param.nameLowerCase>;
<else>
private <param.type> <param.nameLowerCase>;
<endif>
>>

parameterEnumDefinition() ::= <<
public enum Fields{
	<trunc(parameters):parameterEnumParamWithSeparator()><last(parameters):parameterEnumParam()>
};
>>

parameterEnumParam(param) ::= <<
<param.nameUpperCase>
>>

parameterEnumParamWithSeparator(param) ::= <<
<param.nameUpperCase>, 
>>

parameterGetterSetter(param) ::= <<

public <parameterType(param)> get<param.nameUpperCase>() {
       return <param.nameLowerCase>;
}
public void set<param.nameUpperCase>(<parameterType(param)> <param.nameLowerCase>) {
       this.<param.nameLowerCase> = <param.nameLowerCase>;
}
>>

parameterType(param) ::= <<
	<if(param.isPojo || param.isEnumPojo)><param.pojoType><elseif(param.isGenericMap)>java.util.Map\<<param.pojoKey.pojoType>, <param.pojoValue.pojoType>\><elseif(param.isGenericList)>java.util.List\<<param.listType.pojoType>\><elseif(param.isGenericSet)>java.util.Set\<<param.listType.pojoType>\><else><param.type><endif>
>>

remoteResourceParamsWithSeparator(param) ::= <<
	<remoteResourceParams(param)><\n>
>>

remoteResourceParams(param) ::= <<
.set<param.nameUpperCase>(<if(param.isPojo || param.isEnumPojo)> pojo.get<param.nameUpperCase>() == null? null : <bridgeName(param.pojoType)>.getRemoteRepresentation(pojo.get<param.nameUpperCase>())<elseif(param.isGenericMap)> pojo.get<param.nameUpperCase>() == null? null : getRemoteMapRepresentation<param.nameUpperCase>(pojo.get<param.nameUpperCase>())<elseif(param.isGenericList)> pojo.get<param.nameUpperCase>() == null? null : getRemoteListRepresentation<param.nameUpperCase>(pojo.get<param.nameUpperCase>())<elseif(param.isGenericSet)> pojo.get<param.nameUpperCase>() == null? null : getRemoteSetRepresentation<param.nameUpperCase>(pojo.get<param.nameUpperCase>())<else>pojo.get<param.nameUpperCase>()<endif>)
>>

constructorRemoteParameterSetter(param) ::= <<
<\n>this.<param.nameLowerCase> = <if(param.isPojo)>new <param.pojoType>(remote.<param.nameLowerCase>)<elseif(param.isEnumPojo)><param.pojoType>.getPojoRepresentation(remote.<param.nameLowerCase>)<else>remote.<param.nameLowerCase><endif>;
>>

pojoConstructor() ::= <<
public <pojoClassName>() {
	super();
}

public <pojoClassName>(<trunc(parameters):constructorParameterDefWithSeparator()><last(parameters):constructorParameterDef()>) {
	super();
	<parameters:constructorParameterSetter()>
}
>>

constructorParameterDef(param) ::= <<
<parameterType(param)> <param.nameLowerCase>
>>

constructorParameterDefWithSeparator(param) ::= <<
<constructorParameterDef(param)>,
>>

constructorParameterSetter(param) ::= <<
<\n>this.<param.nameLowerCase> = <param.nameLowerCase>;
>>

builder(packageName, remoteClass, pojoClassName, parameters, pojoInterfaceActive, pojoInterface, pojoSuperclassActive, pojoSuperclass, pojoIncludeFieldsEnum) ::= <<
package <packageName>;

public class <pojoClassName><if(pojoSuperclassActive)> extends <pojoSuperclass><endif><if(pojoInterfaceActive)> implements <pojoInterface><endif> {
	<if(pojoIncludeFieldsEnum)><parameterEnumDefinition()><endif>

	<parameters:parameterDeclaration()>
	<pojoConstructor()>

	
	// Getters and Setters
	<parameters:parameterGetterSetter()>

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        <pojoClassName> that = (<pojoClassName>) o;

    <parameters:pojoEquals()>
        return true;
    }

    @Override
    public int hashCode() {
    <first(parameters):pojoFirstHashCode()>
    <rest(parameters):pojoHashCode()>
        return result;
    }
}
>>

enumBuilder(packageName, enumName, pojoEnumName, types) ::= <<
package <packageName>;

public enum <pojoEnumName> implements java.io.Serializable {
	<trunc(types):enumTypeWithSeparator()><last(types):enumType()>;
}
>>

enumTypeWithSeparator(param) ::= <<
	<enumType(param)>,<\ >
>>

enumType(param) ::= <<
	<param>
>>

bridgeRemoteParam(param) ::= <<
<if(param.isPojo || param.isEnumPojo)> remote.<param.nameLowerCase> == null ? null : <bridgeName(param.pojoType)>.getPojoRepresentation(remote.<param.nameLowerCase>)<elseif(param.isGenericMap)> remote.<param.nameLowerCase> == null ? null : getPojoMapRepresentation<param.nameUpperCase>(remote.<param.nameLowerCase>)<elseif(param.isGenericList)> remote.<param.nameLowerCase> == null ? null : getPojoListRepresentation<param.nameUpperCase>(remote.<param.nameLowerCase>)<elseif(param.isGenericSet)> remote.<param.nameLowerCase> == null ? null : getPojoSetRepresentation<param.nameUpperCase>(remote.<param.nameLowerCase>)<else>remote.<param.nameLowerCase><endif>
>>

bridgeRemoteParamMapFunction(param) ::= <<
<if(param.isGenericMap)>
	private static java.util.Map\<<param.pojoKey.pojoType>, <param.pojoValue.pojoType>\> getPojoMapRepresentation<param.nameUpperCase>(java.util.Map\<<param.pojoKey.type>, <param.pojoValue.type>\> map) {
		java.util.Map\<<param.pojoKey.pojoType>, <param.pojoValue.pojoType>\> newMap = new java.util.HashMap\<<param.pojoKey.pojoType>, <param.pojoValue.pojoType>\>(map.size());
		for (java.util.Map.Entry\<<param.pojoKey.type>, <param.pojoValue.type>\> entry : map.entrySet()) {
			newMap.put(<if(param.pojoKey.isPojo)><bridgeName(param.pojoKey.pojoType)>.getPojoRepresentation(entry.getKey())<else>entry.getKey()<endif>,
					   <if(param.pojoValue.isPojo || param.pojoValue.isEnumPojo)><bridgeName(param.pojoValue.pojoType)>.getPojoRepresentation(entry.getValue())<else>entry.getValue()<endif>);
		}
		
		return newMap;
	}

	private static java.util.Map\<<param.pojoKey.type>, <param.pojoValue.type>\> getRemoteMapRepresentation<param.nameUpperCase>(java.util.Map\<<param.pojoKey.pojoType>, <param.pojoValue.pojoType>\> map) {
		java.util.Map\<<param.pojoKey.type>, <param.pojoValue.type>\> newMap = new java.util.HashMap\<<param.pojoKey.type>, <param.pojoValue.type>\>(map.size());
		for (java.util.Map.Entry\<<param.pojoKey.pojoType>, <param.pojoValue.pojoType>\> entry : map.entrySet()) {
			newMap.put(<if(param.pojoKey.isPojo)><bridgeName(param.pojoKey.pojoType)>.getRemoteRepresentation(entry.getKey())<else>entry.getKey()<endif>,
					   <if(param.pojoValue.isPojo || param.pojoValue.isEnumPojo)><bridgeName(param.pojoValue.pojoType)>.getRemoteRepresentation(entry.getValue())<else>entry.getValue()<endif>);
		}
		
		return newMap;
	}
	
<endif>
>>

bridgeRemoteParamListFunction(param) ::= <<
<if(param.isGenericList)>
	private static java.util.List\<<param.listType.pojoType>\> getPojoListRepresentation<param.nameUpperCase>(java.util.List\<<param.listType.type>\> list) {
		java.util.List\<<param.listType.pojoType>\> newList = new java.util.ArrayList\<<param.listType.pojoType>\>(list.size());
		for (<param.listType.type> listEntry : list) {
			newList.add(<if(param.listType.isPojo || param.listType.isEnumPojo)><bridgeName(param.listType.pojoType)>.getPojoRepresentation(listEntry)<else>listEntry<endif>);
		}

		return newList;
	}

	private static java.util.List\<<param.listType.type>\> getRemoteListRepresentation<param.nameUpperCase>(java.util.List\<<param.listType.pojoType>\> list) {
		java.util.List\<<param.listType.type>\> newList = new java.util.ArrayList\<<param.listType.type>\>(list.size());
		for (<param.listType.pojoType> listEntry : list) {
			newList.add(<if(param.listType.isPojo || param.listType.isEnumPojo)><bridgeName(param.listType.pojoType)>.getRemoteRepresentation(listEntry)<else>listEntry<endif>);
		}

		return newList;
	}

<endif>
>>

bridgeRemoteParamSetFunction(param) ::= <<
<if(param.isGenericSet)>
	private static java.util.Set\<<param.listType.pojoType>\> getPojoSetRepresentation<param.nameUpperCase>(java.util.Set\<<param.listType.type>\> set) {
		java.util.Set\<<param.listType.pojoType>\> newSet = new java.util.HashSet\<<param.listType.pojoType>\>(set.size());
		for (<param.listType.type> setEntry: set) {
			newSet.add(<if(param.listType.isPojo || param.listType.isEnumPojo)><bridgeName(param.listType.pojoType)>.getPojoRepresentation(setEntry)<else>setEntry<endif>);
		}

		return newSet;
	}

	private static java.util.Set\<<param.listType.type>\> getRemoteSetRepresentation<param.nameUpperCase>(java.util.Set\<<param.listType.pojoType>\> set) {
		java.util.Set\<<param.listType.type>\> newSet = new java.util.HashSet\<<param.listType.type>\>(set.size());
		for (<param.listType.pojoType> setEntry : set) {
			newSet.add(<if(param.listType.isPojo || param.listType.isEnumPojo)><bridgeName(param.listType.pojoType)>.getRemoteRepresentation(setEntry)<else>setEntry<endif>);
		}

		return newSet;
	}

<endif>
>>

bridgeRemoteParamWithSeparator(param) ::= <<
<bridgeRemoteParam(param)>, 
>>

bridgeName(type) ::= <<
<type>Bridge
>>

enumBridgeBuilder(packageName, enumName, pojoEnumName, types) ::= <<
package <packageName>;

public class <bridgeName(pojoEnumName)> {
	public static <pojoEnumName> getPojoRepresentation(<enumName> type) {
		return type == null? null : <pojoEnumName>.valueOf(type.name());
	}

	public static <enumName> getRemoteRepresentation(<pojoEnumName> pojoEnum) {
		return pojoEnum == null? null : <enumName>.valueOf(pojoEnum.name());
	}
}
>>

bridgeBuilder(packageName, remoteClass, pojoClassName, parameters) ::= <<
package <packageName>;

public class <bridgeName(pojoClassName)> {

	public static <pojoClassName> getPojoRepresentation(<remoteClass> remote) {
		return new <pojoClassName>(<trunc(parameters):bridgeRemoteParamWithSeparator()><last(parameters):bridgeRemoteParam()>);
	}

	public static <remoteClass> getRemoteRepresentation(<pojoClassName> pojo){
		return new <remoteClass>()
		    <trunc(parameters):remoteResourceParamsWithSeparator()><last(parameters):remoteResourceParams()>;
	}
	
	public static java.util.Set\<<remoteClass>\> getRemoteRepresentationCollection(java.util.Set\<<pojoClassName>\> pojoSet) {
		java.util.Set\<<remoteClass>\> remoteRepresentationCollection = new java.util.HashSet\<<remoteClass>\>();
		for (<pojoClassName> pojo : pojoSet) {
			remoteRepresentationCollection.add(<bridgeName(pojoClassName)>.getRemoteRepresentation(pojo));
		}

		return remoteRepresentationCollection;
	}
	
	public static java.util.Set\<<pojoClassName>\> getPojoRepresentationCollection(java.util.Set\<<remoteClass>\> pojoSet) {
		java.util.Set\<<pojoClassName>\> pojoRepresentationCollection = new java.util.HashSet\<<pojoClassName>\>();
		for (<remoteClass> remote : pojoSet) {
			pojoRepresentationCollection.add(<bridgeName(pojoClassName)>.getPojoRepresentation(remote));
		}

		return pojoRepresentationCollection;
	}

	public static java.util.List\<<remoteClass>\> getRemoteRepresentationCollection(java.util.List\<<pojoClassName>\> pojoSet) {
		java.util.List\<<remoteClass>\> remoteRepresentationCollection = new java.util.ArrayList\<<remoteClass>\>();
		for (<pojoClassName> pojo : pojoSet) {
			remoteRepresentationCollection.add(<bridgeName(pojoClassName)>.getRemoteRepresentation(pojo));
		}

		return remoteRepresentationCollection;
	}
	
	public static java.util.List\<<pojoClassName>\> getPojoRepresentationCollection(java.util.List\<<remoteClass>\> pojoSet) {
		java.util.List\<<pojoClassName>\> pojoRepresentationCollection = new java.util.ArrayList\<<pojoClassName>\>();
		for (<remoteClass> remote : pojoSet) {
			pojoRepresentationCollection.add(<bridgeName(pojoClassName)>.getPojoRepresentation(remote));
		}

		return pojoRepresentationCollection;
	}
	
<parameters:bridgeRemoteParamMapFunction()>
<parameters:bridgeRemoteParamListFunction()>
<parameters:bridgeRemoteParamSetFunction()>
}
>>

pojoFirstHashCode(param) ::= <<
    <if(param.primitive)>
    int result = 31 * <param.hashCodeCommand>;
    <else>
    int result = (<param.nameLowerCase> != null ? (<param.nameLowerCase>.hashCode() * 31) : 0);
    <endif>
>>

pojoHashCode(param) ::= <<
    <if(param.isPrimitive)>
    result = 31 * result + <param.hashCodeCommand>;
    <else>
    result = 31 * result + (<param.nameLowerCase> != null ? <param.nameLowerCase>.hashCode() : 0);
    <endif>
>>

pojoEquals(param) ::= <<
    <if(param.isPrimitive)>
    if (<param.nameLowerCase> != that.<param.nameLowerCase>) return false;
    <else>
    if (<param.nameLowerCase> != null ? !<param.nameLowerCase>.equals(that.<param.nameLowerCase>) : that.<param.nameLowerCase> != null) return false;
    <endif>
>>
